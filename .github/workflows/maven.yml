name: "Backend Build and Testing"

on:
  pull_request:
    branches:
      - develop
    paths:
      - CarrerLink-backend/**
      - .github/workflows/maven.yml

    # Trigger when code is pushed to 'develop' (e.g., after a PR is merged)
  push:
    branches:
      - develop
    paths:
      - CarrerLink-backend/**
      - .github/workflows/maven.yml

  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: write
  actions: read

jobs:
  backend:
    name: Build test and deploy backend
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Java
      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      # Step 3: Build Maven project
      - name: Build Java Project with Maven
        run: |
          echo "Building Maven project in the CarrerLink-test directory..."
          mvn clean install -DskipTests
        working-directory: CarrerLink-backend

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Step 6: Build, tag, and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: carrerlink-backend
        working-directory: CarrerLink-backend
        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: carrerlink-taskdefinition.json
          container-name: carrerlink-project
          image: ${{ steps.build-image.outputs.image }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: carrerlink-project-service
          cluster: Sas69cluster
          wait-for-service-stability: true


