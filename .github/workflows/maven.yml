name: "Backend Build and Testing"

on:
  pull_request:
    branches:
      - develop
    paths:
      - CarrerLink-backend/**
      - .github/workflows/maven.yml

    # Trigger when code is pushed to 'develop' (e.g., after a PR is merged)
  push:
    branches:
      - develop
    paths:
      - CarrerLink-backend/**
      - .github/workflows/maven.yml

  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: write
  actions: read

jobs:
  build:
    name: Build test and deploy backend
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Java
      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      # Step 3: Build Maven project
      - name: Build Java Project with Maven
        run: |
          echo "Building Maven project in the CarrerLink-test directory..."
          mvn clean install -DskipTests
        working-directory: CarrerLink-backend

      - name: Login to docker hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Build docker image
        run: docker build -t zibra2001/carrerlink ./CarrerLink-backend
      
      - name: Publish image to docker hub
        run: docker push zibra2001/carrerlink:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up SSH
      - name: Set up SSH key for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.TEST }}
      - name: Pull the image Docker hub
        run: docker pull zibra2001/carrerlink:latest

        # Step 2: Pull the Docker image on EC2
      - name: SSH to EC2 and pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            docker pull zibra2001/carrerlink:latest
          EOF

      # Step 3: Delete Old Docker Container
      - name: SSH to EC2 and remove old container
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            docker rm -f carrerlink-container
          EOF

      # Step 4: Run the new Docker container
      - name: SSH to EC2 and start new container
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            docker run -d -p 8091:8091 --name carrerlink-container zibra2001/carrerlink
          EOF



